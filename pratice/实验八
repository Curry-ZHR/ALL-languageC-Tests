#include<stdio.h>
#include<stdlib.h>

		
int like[5][5]={{0,0,1,1,0},{1,1,0,0,1},{0,1,1,0,1},{0,0,0,1,0},{0,1,0,0,1}};
				//将每个人对书本的喜好程度定义为一个全局变量 	初始化 
int book[5]={0};//书本被选情况初始化为0  只为0或1 
int take[5]={0};//记录书本被哪个人所选情况 	
int num;		//方案数	
				//对书本被选情况和书本被人拿情况   设全局变量，   避免在递归函数中每一次该数组都会被初始化 
				
				
void Try(int i)		//递归函数 用于回溯 

{
	int j,k;	//i表示人 j表示书本 

	for(j=0;j<5;j++)	//j是书本情况 		最外层的一个for循环用来表示选到第j本书 
	{
		if(like[i][j]>0&&book[j]==0)		//喜欢这本书且这本书没有被拿 
		{
			book[j]=1;
			take[i]=j;	//第j本书被第i个人所拿 第0个人拿了第2本书 				第一件事 
		//	printf("第%d个人拿到第%d本书\n",i+1,take[i]+1);

			if(i==4) //如果i=4成立了，方案数加1，并且输出这种方案 
			{
				num++;
				printf("第%d种方案\n",num);									  //第二件事 
				for(k=0;k<5;k++)
					printf("第%d个人拿到第%d本书\n",k+1,take[k]+1);
				printf("\n");	
		
			}	
			else
				Try(i+1);	//i=4不成立，则继续递归 直到i=4成立 
		
			book[j]=0;		//回溯，让第i个人退回第j本书  以便下一个方案开展 		第三件事 
							//从最里面的第5个人开始退书 
		}			
	}	

}
int main()
{
	
	int i=0;
	int num;	//记录方案总数 ;
	printf("已知每人对书本喜爱情况如下：\n");
	printf("	0	1	2	3	4\n");
	printf("A	0	0	1	1	0\n");
	printf("B	1	1	0	0	1\n");
	printf("C	0	1	1	0	1\n");
	printf("D	0	0	0	1	0\n");
	printf("E	0	1	0	0	1\n");

	printf("分书情况如下：\n"); 
	
	Try(i);
	
	return 0;
}
	
/*回溯法(探索与回溯法)是一种选优搜索法，又称为试探法， 深度选优 
按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择*/


/*首先先展开五次递归函数，然后从最里层开始判断，若没有另一个满足的条件 就向外走一层，然后最里层book[j]释放，以便它进行下一次尝试*/

/*A  j=2
  B  j=0
  C	 j=1
  D  j=3
  E  j=4	先展开第一个方案，然后最里层的for循环执行到了j=4，跳出循环，释放book[j]，开始执行上一层的递归函数的for循环
  			寻找是否有满足分书条件的第二个方案，若for循环再次执行完毕，跳出循环，释放book[j]，再次执行再上一层递归函数
			  for循环，寻找是否有满足分书条件的方案*/
